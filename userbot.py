# Aiogram imports
from pyrogram import Client, filters
from pyrogram.types import Message
from pyrogram.errors import FloodWait, PeerIdInvalid, UsernameNotOccupied
from pyrogram.enums import ChatAction
from pyrogram.enums.parse_mode import ParseMode
from pyrogram.handlers import MessageHandler

# Another imports
from datetime import datetime
from re import search as re_search
from asyncio import sleep
import random
import simplejson as json
import os.path


# Create cfg if not exists
if not os.path.exists("./config.json"):
	with open('config.json', 'w') as j:
		account_name = "account"
		api_id = input('–í–≤–µ–¥–∏ api_id --> ')
		api_hash = input('–í–≤–µ–¥–∏ api_hash --> ')

		result = {
			"session_name": account_name,
			"API_ID": api_id,
			"API_HASH": api_hash
		}

		json.dump(result, j)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
with open('config.json', 'r') as j:
	login_data = json.load(j)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞
client = Client(login_data.get('session_name'), api_id = login_data.get('API_ID'), api_hash = login_data.get('API_HASH'))


# –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ
async def send_log(msg: str, error_info: str):
	await client.send_message("me", f"‚ùå {msg}\nüí¨ [{datetime.now().strftime('%H:%M')}] {error_info}")


# –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è, –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –∏–ª–∏ —á–∞—Ç, —Ç–æ title
async def get_name(msg: Message):
	if msg.chat.title is None:

		if msg.chat.first_name is None:
			name = ""
		else:
			name = msg.chat.first_name + " "

		if msg.chat.last_name is None:
			surname = ""
			name = name[:-1]
		else:
			surname = msg.chat.last_name

		return f"{name}{surname}"
	else:
		return msg.chat.title


# /typing text=str; ts=symbol;
# /t text=str; ts=symbol;
@client.on_message(filters.command(commands = ["typing", "t"], prefixes = "/") & filters.me)
async def typing(client: Client, msg: Message, _text = "", _ts = ""):
	# –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞ –∏–∑ –¥—Ä—É–≥–æ–π
	if _text and _ts:
		text = _text
		ts = _ts
	# –ò–Ω–∞—á–µ –ø–∞—Ä—Å–∏–º
	else:
		# –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞
		text_parsing = re_search(r'(?<=text\=).+?(?=;)', msg.text)
		# –ü–∞—Ä—Å–∏–Ω–≥ —Å–∏–º–≤–æ–ª–∞ –ø–µ—á–∞—Ç–∏
		ts_parsing = re_search(r'(?<=ts\=).+?(?=;)', msg.text)
		
		# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞
		if text_parsing:
			text = text_parsing[0]
		else:
			await msg.delete()
			await send_log(msg = msg.text, error_info = "–ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—á–∞—Ç–∏")
			return

		# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∏–º–≤–æ–ª–∞
		if ts_parsing:
			ts = ts_parsing[0]
		# Value by default
		else:
			ts = "_"
		
	# –ö–æ–ø–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –≤—ã—Ç–∞—Å–∫–∏–≤–∞—Ç—å —Å–∏–º–≤–æ–ª—ã
	copied_text = text

	# –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—á–∞—Ç–∏
	to_be_printed = ""

	# –ü–æ–∫–∞ –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã–π —Ç–µ–∫—Å—Ç –Ω–µ —Ä–∞–≤–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É, —Ç–æ –ø–µ—á–∞—Ç–∞–µ–º
	while to_be_printed != text:

		try:
			await msg.edit(to_be_printed + ts)
			await sleep(.1)

			to_be_printed += copied_text[0]
			copied_text = copied_text[1:]

			await msg.edit(to_be_printed)
			await sleep(.1)

		except FloodWait as fw:
			await sleep(fw.value)

		except Exception:
			pass


# ‚ù§Ô∏è magic text=str;
@client.on_message(filters.command(commands = "magic", prefixes = '‚ù§Ô∏è ') & filters.me)
async def magic(client: Client, msg: Message):

	# –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞
	text_parsing = re_search(r'(?<=text\=).+?(?=;)', msg.text)

	# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞
	if text_parsing:
		text = text_parsing[0]
	# Value by default
	else:
		text = '‚ù§Ô∏è'

	# –§—Ä–µ–π–º—ã
	frame_1 = """ü§çü§çü§çü§çü§çü§çü§çü§çü§ç
ü§çü§ç‚ù§Ô∏è‚ù§Ô∏èü§ç‚ù§Ô∏è‚ù§Ô∏èü§çü§ç
ü§ç‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏èü§ç
ü§ç‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏èü§ç
ü§ç‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏èü§ç
ü§çü§ç‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏èü§çü§ç
ü§çü§çü§ç‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏èü§çü§çü§ç
ü§çü§çü§çü§ç‚ù§Ô∏èü§çü§çü§çü§ç
ü§çü§çü§çü§çü§çü§çü§çü§çü§ç"""

	frame_2 = frame_1.replace("‚ù§Ô∏è", "üß°")

	frame_3 = frame_1.replace("‚ù§Ô∏è", "üíõ")

	frame_4 = frame_1.replace("‚ù§Ô∏è", "üíö")

	frame_5 = frame_1.replace("‚ù§Ô∏è", "üíô")

	frame_6 = frame_1.replace("‚ù§Ô∏è", "üíú")

	frame_7 = frame_1.replace("‚ù§Ô∏è", "üñ§")

	frame_8 = frame_1.replace("‚ù§Ô∏è", "ü§é")

	# –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Å–µ—Ä–¥–µ—Ü
	heart_assortment = ["‚ù§Ô∏è", "üß°", "üíõ", "üíö", "üíô", "üíú", "üñ§", "ü§é"]

	# –†–∞–Ω–¥–æ–º–Ω—ã–µ —Ñ—Ä–µ–π–º—ã
	frame_9 = "".join(
		list(map(lambda x: "\n" if x == "\n" else random.choice(heart_assortment) if x != "ü§ç" else "ü§ç", frame_8)))

	frame_10 = "".join(
		list(map(lambda x: "\n" if x == "\n" else random.choice(heart_assortment) if x != "ü§ç" else "ü§ç", frame_8)))

	frame_11 = "".join(
		list(map(lambda x: "\n" if x == "\n" else random.choice(heart_assortment) if x != "ü§ç" else "ü§ç", frame_8)))

	frame_12 = "".join(
		list(map(lambda x: "\n" if x == "\n" else random.choice(heart_assortment) if x != "ü§ç" else "ü§ç", frame_8)))

	frame_13 = "".join(
		list(map(lambda x: "\n" if x == "\n" else random.choice(heart_assortment) if x != "ü§ç" else "ü§ç", frame_8)))

	# –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ñ—Ä–µ–π–º—ã –≤ —Å–ø–∏—Å–æ–∫
	frames_to_print = [frame_1, frame_2, frame_3, frame_4, frame_5, frame_6, frame_7, frame_8, frame_9, frame_10, frame_11, frame_12, frame_13, frame_1]

	# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ —Ñ—Ä–µ–π–º—ã
	for frame in frames_to_print:

		try:
			await msg.edit(frame)
			await sleep(.4)

		except FloodWait as fw:
			await sleep(fw.value)

			await msg.edit(frame)
			await sleep(.4)

	# –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ–Ω –∫—Ä–∞—Å–Ω—ã–º–∏ —Å–µ—Ä–¥—Ü–∞–º–∏
	while frame_1.find("ü§ç") != -1:

		try:
			# –†–µ–ø–ª–µ–π—Å–∏–º –æ–¥–Ω–æ –±–µ–ª–æ–µ –Ω–∞ –∫—Ä–∞—Å–Ω–æ–µ
			frame_1 = frame_1.replace("ü§ç", "‚ù§Ô∏è", 1)
			# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º
			await msg.edit(frame_1)
			await sleep(.1)

		except FloodWait as fw:
			await sleep(fw.value)

			# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º
			await msg.edit(frame_1)
			await sleep(.1)

	# –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Ñ—Ä–µ–π–º–∞
	heart_rows_list = frame_1.split("\n")
	# –û–±—Ä–µ–∑–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –ø–æ–∫–∞ –Ω–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª (8 –∏—Ç–µ—Ä–∞—Ü–∏–π)
	for _ in range(8):
		# –£–¥–∞–ª—è–µ—Ç—Å—è –Ω–∏–∂–Ω—è—è —Å—Ç—Ä–æ–∫–∞
		del heart_rows_list[len(heart_rows_list) - 1]

		# –£–¥–∞–ª—è–µ—Ç—Å—è –ø–æ –æ–¥–Ω–æ–º—É –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–∏–º–≤–æ–ª—É –∏–∑ —Å—Ç—Ä–æ–∫
		for i in range(len(heart_rows_list)):
			heart_rows_list[i] = heart_rows_list[i][:-2]

		# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ—Ä–µ–π–º
		try:
			frame = "\n".join(heart_rows_list)

			await msg.edit(frame)
			await sleep(.4)

		except FloodWait as fw:
			await sleep(fw.value)

			await msg.edit(frame)
			await sleep(.4)

	# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–Ω–µ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	try:
		await msg.edit(text)

	except FloodWait as fw:
		await sleep(fw.value)
		await msg.edit(text)

	except Exception:
		pass


# ‚ù§Ô∏è mini-magic text=str;
@client.on_message(filters.command(commands = "mini-magic", prefixes = '‚ù§Ô∏è ') & filters.me)
async def mini_magic(client: Client, msg: Message):

	# –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞
	text_parsing = re_search(r'(?<=text\=).+?(?=;)', msg.text)

	# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞
	if text_parsing:
		text = text_parsing[0]
	# Value by default
	else:
		text = '‚ù§Ô∏è'

	# –§—Ä–µ–π–º—ã
	frame_1 = """‚ú®üíéüíé‚ú®üíéüíé‚ú®
üíéüíéüíéüíéüíéüíéüíé
üíéüíéüíéüíéüíéüíéüíé
‚ú®üíéüíéüíéüíéüíé‚ú®
‚ú®‚ú®üíéüíéüíé‚ú®‚ú®
‚ú®‚ú®‚ú®üíé‚ú®‚ú®‚ú®
"""

	frame_2 = frame_1.replace("üíé", "üå∫")
	frame_3 = frame_1.replace("üíé", "üòò").replace("‚ú®", "‚òÅÔ∏è")
	frame_4 = frame_1.replace("üíé", "üå∏")
	frame_5 = frame_1.replace("üíé", "üê∏").replace("‚ú®", "üåæ")
	frame_6 = frame_1.replace("üíé", "üí•").replace("‚ú®", "üî´")
	frame_7 = frame_1.replace("üíé", "üíü").replace("‚ú®", "‚òÅÔ∏è")
	frame_8 = frame_1.replace("üíé", "üíñ").replace("‚ú®", "üçÄ")
	frame_9 = frame_1.replace("üíé", "üêº").replace("‚ú®", "üå¥")

	# –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ñ—Ä–µ–π–º—ã –≤ —Å–ø–∏—Å–æ–∫
	frames = [frame_1, frame_2, frame_3, frame_4, frame_5, frame_6, frame_7, frame_8, frame_9]

	# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ—Ä–µ–π–º
	for frame in frames:
		
		try:
			await msg.edit(frame)
			await sleep(.5)

		except FloodWait as fw:
			await sleep(fw.value)

			await msg.edit(frame)
			await sleep(.5)

	# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–Ω–µ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	try:
		await msg.edit(text)

	except FloodWait as fw:
		await sleep(fw.value)
		await msg.edit(text)

	except Exception:
		pass


# /orange
@client.on_message(filters.command(commands = "orange", prefixes = "/") & filters.me)
async def orange(client: Client, msg: Message):
	frame_1 = "üçäüçäüçä –ó–∞–í–æ–¥–ù–æ–ô –ê–ø–ï–ª–¨—Å–ò–Ω üçäüçäüçä"
	frame_2 = "üçäüçä –ó–∞–í–æ–¥–ù–æ–ô –ê–ø–ï–ª–¨—Å–ò–Ω üçäüçä"
	frame_3 = "üçä –ó–∞–í–æ–¥–ù–æ–ô –ê–ø–ï–ª–¨—Å–ò–Ω üçä"

	frames = [frame_1, frame_2, frame_3, frame_2, frame_1, frame_2, frame_3, frame_2, frame_1, frame_2, frame_3, frame_2, frame_1, frame_2, frame_3, frame_2, frame_1, "üçä"]

	for frame in frames:
		try:
			await msg.edit(frame)
			await sleep(.5)

		except FloodWait as fw:
			await sleep(fw.value)

			await msg.edit(frame)
			await sleep(.5)


# /coin
@client.on_message(filters.command(commands = "coin", prefixes = "/") & filters.me)
async def coin(client: Client, msg: Message):
	# –ù–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
	text = "‚ôªÔ∏è –ü–æ–¥–∫–∏–¥—ã–≤–∞—é –º–æ–Ω–µ—Ç–∫—É..."
	# –î–≤–∞ –∏—Å—Ö–æ–¥–∞
	events = ["–û—Ä—ë–ª ü¶Ö", "–†–µ—à–∫–∞ üí∏"]

	# –ê–Ω–∏–º–∏—Ä—É–µ–º —Ç–æ—á–∫–∏
	try:
		await msg.edit(text)

		await sleep(.4)

		for _ in range(3):
			for i in range(-1, -3, -1):
				await msg.edit(text[:i])

				await sleep(.4)
		
	except FloodWait as fw:
		await sleep(fw.value)

	# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–Ω–¥–æ–º–∏–Ω–≥–∞
	try:
		await msg.edit(random.choice(events))

	except FloodWait as fw:
		await sleep(fw.value)
		await msg.edit(random.choice(events))


# /roll to=int;
@client.on_message(filters.command(commands = "roll", prefixes = "/") & filters.me)
async def roll(client: Client, msg: Message):
	
	# –ü–∞—Ä—Å–∏–Ω–≥ to
	to_parsing = re_search(r'(?<=to\=).+?(?=;)', msg.text)

	# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ to
	if to_parsing:
		try:
			to = int(to_parsing[0])
		except ValueError:
			await msg.delete()
			await send_log(msg = msg.text, error_info = "–ü–∞—Ä–∞–º–µ—Ç—Ä 'to' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º")
			return

	# Value by default
	else:
		to = 100

	emojis = {
		"0": "0Ô∏è‚É£",
		"1": "1Ô∏è‚É£",
		"2": "2Ô∏è‚É£",
		"3": "3Ô∏è‚É£",
		"4": "4Ô∏è‚É£",
		"5": "5Ô∏è‚É£",
		"6": "6Ô∏è‚É£",
		"7": "7Ô∏è‚É£",
		"8": "8Ô∏è‚É£",
		"9": "9Ô∏è‚É£",
	}

	text = f"‚ôªÔ∏è –†–∞–Ω–¥–æ–º–ª—é —á–∏—Å–ª–æ (–æ—Ç 1 –¥–æ {to}) |"

	# –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ —Ä–æ–ª–ª–∏–Ω–≥–∞
	try:
		await msg.edit(text)

		await sleep(.4)

		for _ in range(3):
			for s in ["/", "-", "\\", "|"]:
				await msg.edit(text[:-1] + s)
				await sleep(.4)

		random_number = str(random.randint(1, to))

		result = ""

		for n in random_number:
			result += emojis[n]

	except FloodWait as fw:
		await sleep(fw.value)

	# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	try:
		await msg.edit(result)

	except FloodWait as fw:
		await sleep(fw.value)
		await msg.edit(result)


# /reverse text=str;
@client.on_message(filters.command(commands = ["reverse", "r"], prefixes = "/") & filters.me)
async def reverse(client: Client, msg: Message):
	
	# –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞
	text_parsing = re_search(r'(?<=text\=).+?(?=;)', msg.text)
	
	# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞
	if text_parsing:
		text = text_parsing[0]
	else:
		await msg.delete()
		await send_log(msg = msg.text, error_info = "–ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç –¥–ª—è 'reverse'")
		return

	# Reversing
	reversed_text = "".join(reversed(list(text)))

	# Result
	try:
		await msg.edit(reversed_text)

	except FloodWait as fw:
		await sleep(fw.value)
		await msg.edit(reversed_text)


# /ily text=str; ts=str;
# /iloveyou text=str; ts=str;
@client.on_message(filters.command(commands = ["ily", "iloveyou"], prefixes = "/") & filters.me)
async def ily(client: Client, msg: Message):

	# –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞
	text_parsing = re_search(r'(?<=text\=).+?(?=;)', msg.text)
	# –ü–∞—Ä—Å–∏–Ω–≥ —Å–∏–º–≤–æ–ª–∞ –ø–µ—á–∞—Ç–∏
	ts_parsing = re_search(r'(?<=ts\=).+?(?=;)', msg.text)
	
	# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞
	if text_parsing:
		text = text_parsing[0]
	# Value by default
	else:
		text = "‚ù§Ô∏è"

	# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∏–º–≤–æ–ª–∞
	if ts_parsing:
		ts = ts_parsing[0]
	# Value by default
	else:
		ts = "_"

	# –§—Ä–µ–π–º—ã –∞–Ω–∏–º–∞—Ü–∏–∏
	first_frame = """‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®
‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®
‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®
‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®
‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®üåÉüåÉüåÉüåÉüåÉ
üåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉ
üåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉ
üåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉ
üåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉ
üåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉ
üåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉ"""

	i_frame = """‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®
‚ú®‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ú®
‚ú®‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ú®
‚ú®‚ú®‚ú®‚ú®‚ù§Ô∏è‚ù§Ô∏è‚ú®‚ú®‚ú®‚ú®‚ú®
‚ú®‚ú®‚ú®‚ú®‚ù§Ô∏è‚ù§Ô∏èüåÉüåÉüåÉüåÉüåÉ
üåÉüåÉüåÉüåÉ‚ù§Ô∏è‚ù§Ô∏èüåÉüåÉüåÉüåÉüåÉ
üåÉüåÉüåÉüåÉ‚ù§Ô∏è‚ù§Ô∏èüåÉüåÉüåÉüåÉüåÉ
üåÉüåÉüåÉüåÉ‚ù§Ô∏è‚ù§Ô∏èüåÉüåÉüåÉüåÉüåÉ
üåÉ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏èüåÉ
üåÉ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏èüåÉ
üåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉ"""

	second_frame = """‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®
‚ú®‚ù§Ô∏è‚ù§Ô∏è‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®
‚ú®‚ù§Ô∏è‚ù§Ô∏è‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®
‚ú®‚ù§Ô∏è‚ù§Ô∏è‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®
‚ú®‚ù§Ô∏è‚ù§Ô∏è‚ú®‚ú®‚ú®üåÉüåÉüåÉüåÉüåÉ
üåÉ‚ù§Ô∏è‚ù§Ô∏èüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉ
üåÉ‚ù§Ô∏è‚ù§Ô∏èüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉ
üåÉ‚ù§Ô∏è‚ù§Ô∏èüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉ
üåÉ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏èüåÉüåÉ
üåÉ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏èüåÉüåÉ
üåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉ"""

	third_frame = """‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®
‚ú®‚ú®‚ú®‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ú®‚ú®‚ú®
‚ú®‚ú®‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ú®‚ú®
‚ú®‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ú®‚ú®‚ú®‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ú®
‚ú®‚ù§Ô∏è‚ù§Ô∏è‚ú®‚ú®‚ú®üåÉüåÉ‚ù§Ô∏è‚ù§Ô∏èüåÉ
üåÉ‚ù§Ô∏è‚ù§Ô∏èüåÉüåÉüåÉüåÉüåÉ‚ù§Ô∏è‚ù§Ô∏èüåÉ
üåÉ‚ù§Ô∏è‚ù§Ô∏èüåÉüåÉüåÉüåÉüåÉ‚ù§Ô∏è‚ù§Ô∏èüåÉ
üåÉ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏èüåÉüåÉüåÉ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏èüåÉ
üåÉüåÉ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏èüåÉüåÉ
üåÉüåÉüåÉ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏èüåÉüåÉüåÉ
üåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉ"""

	fourth_frame = """‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®
‚ú®‚ù§Ô∏è‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ù§Ô∏è‚ú®
‚ú®‚ù§Ô∏è‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ù§Ô∏è‚ú®
‚ú®‚ù§Ô∏è‚ù§Ô∏è‚ú®‚ú®‚ú®‚ú®‚ú®‚ù§Ô∏è‚ù§Ô∏è‚ú®
‚ú®‚ú®‚ù§Ô∏è‚ú®‚ú®‚ú®üåÉüåÉ‚ù§Ô∏èüåÉüåÉ
üåÉüåÉ‚ù§Ô∏è‚ù§Ô∏èüåÉüåÉüåÉ‚ù§Ô∏è‚ù§Ô∏èüåÉüåÉ
üåÉüåÉ‚ù§Ô∏è‚ù§Ô∏èüåÉüåÉüåÉ‚ù§Ô∏è‚ù§Ô∏èüåÉüåÉ
üåÉüåÉüåÉ‚ù§Ô∏èüåÉüåÉüåÉ‚ù§Ô∏èüåÉüåÉüåÉ
üåÉüåÉüåÉüåÉ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏èüåÉüåÉüåÉüåÉ
üåÉüåÉüåÉüåÉüåÉ‚ù§Ô∏èüåÉüåÉüåÉüåÉüåÉ
üåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉ"""

	fifth_frame = """‚ú®‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ú®
‚ú®‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ú®
‚ú®‚ù§Ô∏è‚ù§Ô∏è‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®
‚ú®‚ù§Ô∏è‚ù§Ô∏è‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®
‚ú®‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏èüåÉ
üåÉ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏èüåÉ
üåÉ‚ù§Ô∏è‚ù§Ô∏èüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉ
üåÉ‚ù§Ô∏è‚ù§Ô∏èüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉ
üåÉ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏èüåÉ
üåÉ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏èüåÉ
üåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉ"""

	sixth_frame = """‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®
‚ú®‚ù§Ô∏è‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ù§Ô∏è‚ú®
‚ú®‚ú®‚ù§Ô∏è‚ú®‚ú®‚ú®‚ú®‚ú®‚ù§Ô∏è‚ú®‚ú®
‚ú®‚ú®‚ú®‚ù§Ô∏è‚ú®‚ú®‚ú®‚ù§Ô∏è‚ú®‚ú®‚ú®
‚ú®‚ú®‚ú®‚ú®‚ù§Ô∏è‚ú®‚ù§Ô∏èüåÉüåÉüåÉüåÉ
üåÉüåÉüåÉüåÉüåÉ‚ù§Ô∏èüåÉüåÉüåÉüåÉüåÉ
üåÉüåÉüåÉüåÉüåÉ‚ù§Ô∏èüåÉüåÉüåÉüåÉüåÉ
üåÉüåÉüåÉüåÉüåÉ‚ù§Ô∏èüåÉüåÉüåÉüåÉüåÉ
üåÉüåÉüåÉüåÉüåÉ‚ù§Ô∏èüåÉüåÉüåÉüåÉüåÉ
üåÉüåÉüåÉüåÉüåÉ‚ù§Ô∏èüåÉüåÉüåÉüåÉüåÉ
üåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉ"""

	seventh_frame = """‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®
‚ú®‚ú®‚ú®‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ú®‚ú®‚ú®
‚ú®‚ú®‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ú®‚ú®
‚ú®‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ú®‚ú®‚ú®‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ú®
‚ú®‚ù§Ô∏è‚ù§Ô∏è‚ú®‚ú®‚ú®üåÉüåÉ‚ù§Ô∏è‚ù§Ô∏èüåÉ
üåÉ‚ù§Ô∏è‚ù§Ô∏èüåÉüåÉüåÉüåÉüåÉ‚ù§Ô∏è‚ù§Ô∏èüåÉ
üåÉ‚ù§Ô∏è‚ù§Ô∏èüåÉüåÉüåÉüåÉüåÉ‚ù§Ô∏è‚ù§Ô∏èüåÉ
üåÉ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏èüåÉüåÉüåÉ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏èüåÉ
üåÉüåÉ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏èüåÉüåÉ
üåÉüåÉüåÉ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏èüåÉüåÉüåÉ
üåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉ"""

	eighth_frame = """‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®
‚ú®‚ù§Ô∏è‚ù§Ô∏è‚ú®‚ú®‚ú®‚ú®‚ú®‚ù§Ô∏è‚ù§Ô∏è‚ú®
‚ú®‚ù§Ô∏è‚ù§Ô∏è‚ú®‚ú®‚ú®‚ú®‚ú®‚ù§Ô∏è‚ù§Ô∏è‚ú®
‚ú®‚ù§Ô∏è‚ù§Ô∏è‚ú®‚ú®‚ú®‚ú®‚ú®‚ù§Ô∏è‚ù§Ô∏è‚ú®
‚ú®‚ù§Ô∏è‚ù§Ô∏è‚ú®‚ú®‚ú®üåÉüåÉ‚ù§Ô∏è‚ù§Ô∏èüåÉ
üåÉ‚ù§Ô∏è‚ù§Ô∏èüåÉüåÉüåÉüåÉüåÉ‚ù§Ô∏è‚ù§Ô∏èüåÉ
üåÉ‚ù§Ô∏è‚ù§Ô∏èüåÉüåÉüåÉüåÉüåÉ‚ù§Ô∏è‚ù§Ô∏èüåÉ
üåÉ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏èüåÉüåÉüåÉ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏èüåÉ
üåÉüåÉ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏èüåÉüåÉ
üåÉüåÉüåÉ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏èüåÉüåÉüåÉ
üåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉüåÉ"""

	# –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ñ—Ä–µ–π–º—ã –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
	frames = [first_frame, i_frame, second_frame, third_frame, fourth_frame, fifth_frame, sixth_frame, seventh_frame, eighth_frame]

	# –í—ã–≤–æ–¥–∏–º –∫–∞–∂–¥—ã–π —Ñ—Ä–µ–π–º —Å –∫/–¥ –≤ 0.7 —Å–µ–∫
	for frame in frames:

		try:
			await msg.edit(frame)
			await sleep(.7)

		except FloodWait as fw:
			await sleep(fw.value)
			
			await msg.edit(frame)
			await sleep(.7)

	# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—á–∞—Ç—å —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Ä–∞–≤–µ–Ω –¥–µ—Ñ–æ–ª—Ç–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
	if text == "‚ù§Ô∏è":
		await msg.edit(text)

	else:
		await typing(client, msg, text, ts)


# /m
# /moon
@client.on_message(filters.command(commands = ["m", "moon"], prefixes = "/") & filters.me)
async def moon(client: Client, msg: Message):
	# str -> list
	text_list = list("–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏ ‚ù§Ô∏èüåï‚ù§Ô∏è")
	# –§—Ä–µ–π–º—ã –ª—É–Ω—ã
	moons_list = ["üåñ", "üåó", "üåò", "üåë", "üåí", "üåì", "üåî", "üåï"]

	# –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–≤—ã–π —Ñ—Ä–µ–π–º
	try:
		await msg.edit("".join(text_list))

	except FloodWait as fw:
		await sleep(fw.value)
		await msg.edit("".join(text_list))

	# 3 –ø–æ–ª–Ω—ã—Ö –æ–±–æ—Ä–æ—Ç–∞
	for _ in range(3):
		
		# –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π –æ–±–æ—Ä–æ—Ç –ª—É–Ω—ã
		for moon in moons_list:

			try:
				# –ö–î 0.5 —Å–µ–∫
				await sleep(.35)
				# –ó–∞–º–µ–Ω—è–µ–º –ª—É–Ω—É –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç–∞–¥–∏—é –ø–æ–≤–æ—Ä–æ—Ç–∞
				text_list[-3] = moon
				# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º
				await msg.edit("".join(text_list))

			except FloodWait as fw:
				await sleep(fw.value)

				# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º
				await msg.edit("".join(text_list))


# ‚ù§Ô∏è magic2 text=str;
@client.on_message(filters.command(commands = "magic2", prefixes = '‚ù§Ô∏è ') & filters.me)
async def magic2(client: Client, msg: Message):

	# –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞
	text_parsing = re_search(r'(?<=text\=).+?(?=;)', msg.text)
	
	# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞
	if text_parsing:
		text = text_parsing[0]
	# Value by default
	else:
		text = "‚ù§Ô∏è"


	# –ü–æ–ª–µ
	field = ["‚ö™Ô∏è"]
	
	# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–ª—ã–π –∫—Ä—É–∂–æ–∫
	try:
		await msg.edit(field[0])
		await sleep(.4)

	except FloodWait as fw:
		await sleep(fw.value)

		await msg.edit(field[0])
		await sleep(.4)

	# –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ–Ω
	for i in range(8):
		for row in enumerate(field):
			field[row[0]] = row[1] + "‚ö™Ô∏è"

		field.append(field[0])

		try:
			frame = "\n".join(field)

			await msg.edit(frame)
			await sleep(.4)

		except FloodWait as fw:
			await sleep(fw.value)

			await msg.edit(frame)
			await sleep(.4)

	# –ö–æ–ø–∏—Ä—É–µ–º —Ñ–æ–Ω
	white_fon = field.copy()

	# –®–∞–±–ª–æ–Ω—ã —Å—Ç—Ä–æ–∫
	heart_rows = {
		1: "‚ö™Ô∏è‚ö™Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ö™Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ö™Ô∏è‚ö™Ô∏è",
		2: "‚ö™Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ö™Ô∏è",
		3: "‚ö™Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ö™Ô∏è",
		4: "‚ö™Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ö™Ô∏è",
		5: "‚ö™Ô∏è‚ö™Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ö™Ô∏è‚ö™Ô∏è",
		6: "‚ö™Ô∏è‚ö™Ô∏è‚ö™Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ö™Ô∏è‚ö™Ô∏è‚ö™Ô∏è",
		7: "‚ö™Ô∏è‚ö™Ô∏è‚ö™Ô∏è‚ö™Ô∏è‚ù§Ô∏è‚ö™Ô∏è‚ö™Ô∏è‚ö™Ô∏è‚ö™Ô∏è"
	}
	
	# –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–µ—Ä–¥—Ü–µ
	for i in range(1, 8):
		field[i] = heart_rows[i]

		try:
			frame = "\n".join(field)

			await msg.edit(frame)
			await sleep(.4)

		except FloodWait as fw:
			await sleep(fw.value)

			await msg.edit(frame)
			await sleep(.4)


	# Assortment
	heart_assortment = ["üß°", "üíõ", "üíö", "üíô", "üíú"]

	# –ê–Ω–∏–º–∏—Ä—É–µ–º —Å–µ—Ä–¥—Ü–µ —Ä–∞–∑–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
	for heart in heart_assortment:
		try:
			frame = "\n".join(field).replace("‚ù§Ô∏è", heart)

			await msg.edit(frame)
			await sleep(.4)

		except FloodWait as fw:
			await sleep(fw.value)

			await msg.edit(frame)
			await sleep(.4)
	
	# –®–∞–±–ª–æ–Ω—ã —Å—Ç—Ä–æ–∫ 2
	rainbow_heart_rows = {
		1: "‚ö™Ô∏è‚ö™Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ö™Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ö™Ô∏è‚ö™Ô∏è",
		2: "‚ö™Ô∏èüß°üß°üß°üß°üß°üß°üß°‚ö™Ô∏è",
		3: "‚ö™Ô∏èüíõüíõüíõüíõüíõüíõüíõ‚ö™Ô∏è",
		4: "‚ö™Ô∏èüíöüíöüíöüíöüíöüíöüíö‚ö™Ô∏è",
		5: "‚ö™Ô∏è‚ö™Ô∏èüíôüíôüíôüíôüíô‚ö™Ô∏è‚ö™Ô∏è",
		6: "‚ö™Ô∏è‚ö™Ô∏è‚ö™Ô∏èüíúüíúüíú‚ö™Ô∏è‚ö™Ô∏è‚ö™Ô∏è",
		7: "‚ö™Ô∏è‚ö™Ô∏è‚ö™Ô∏è‚ö™Ô∏èüíú‚ö™Ô∏è‚ö™Ô∏è‚ö™Ô∏è‚ö™Ô∏è"
	}

	# –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–µ—Ä–¥—Ü–µ
	for i in range(1, 8):
		field[i] = rainbow_heart_rows[i]

	try:
		frame = "\n".join(field)

		await msg.edit(frame)
		await sleep(.4)

	except FloodWait as fw:
		await sleep(fw.value)

		await msg.edit(frame)
		await sleep(.4)
	###

	# –†–∞–¥—É–∂–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
	# * 2 - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–Ω—ã—Ö –ø–æ–≤—Ç–æ—Ä–æ–≤
	for _ in range(7 * 2):

		first_heart = ""

		for i in range(1, 8):
			if i == 1:
				first_heart = field[i][4]

				field[i] = field[i].replace(
					field[i][4],
					field[i + 1][len(field[i + 1]) // 2 + 1]
				)
			elif i == 6:
				field[i] = field[i].replace(
					field[i][len(field[i]) // 2 + 1],
					field[i + 1][len(field[i + 1]) // 2]
				)
			elif i == 7:
				field[i] = field[i].replace(field[i][len(field[i]) // 2], first_heart)
			else:
				field[i] = field[i].replace(
					field[i][len(field[i]) // 2 + 1],
					field[i + 1][len(field[i + 1]) // 2 + 1]
				)

		try:
			frame = "\n".join(field)

			await msg.edit(frame)
			await sleep(.4)

		except FloodWait as fw:
			await sleep(fw.value)

			await msg.edit(frame)
			await sleep(.4)

	try:
		field = white_fon.copy()
		frame = "\n".join(field)

		await msg.edit(frame)
		await sleep(.4)

	except FloodWait as fw:
		await sleep(fw.value)

		await msg.edit(frame)
		await sleep(.4)

	for _ in range(8):
		del field[len(field) - 1]

		for i in range(len(field)):
			field[i] = field[i][2:]

		try:
			frame = "\n".join(field)

			await msg.edit(frame)
			await sleep(.4)
		except FloodWait as fw:
			await sleep(fw.value)

			await msg.edit(frame)
			await sleep(.4)

	try:
		await msg.edit(text)

	except FloodWait as fw:
		await sleep(fw.value)

		await msg.edit(text)


# /choice cond1;cond2;cond3
@client.on_message(filters.command(commands = "choice", prefixes = "/") & filters.me)
async def choice(client: Client, msg: Message):
	try:
		options = [option for option in msg.text.split(maxsplit = 1)[1].split(";")]
	except IndexError:
		await msg.delete()
		await send_log(msg = msg.text, error_info = "–ù–µ —É–∫–∞–∑–∞–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞")
		return

	text = "‚ôªÔ∏è –î–µ–ª–∞—é —Ä–∞–Ω–¥–æ–º–Ω—ã–π –≤—ã–±–æ—Ä –∏–∑:"

	for option in options:
		text += f"\n ‚Ä¢ {option}"

	text += "\n\nüïò –î–∞–π –º–Ω–µ 7 —Å–µ–∫..."

	try:
		await msg.edit(text)

		await sleep(.4)

		for _ in range(7):
			for i in range(-1, -3, -1):
				await msg.edit(text[:i])

				await sleep(.5)

		await msg.edit(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {random.choice(options)}")

	except FloodWait as fw:
		await sleep(fw.value)


#### FLOODERS


flooding_targets = {}


# /repeat text=str; amount=int;
@client.on_message(filters.command(commands = "repeat", prefixes = "/") & filters.me)
async def repeat(client: Client, msg: Message):
	# –ü–æ–ª—É—á–∞—Ç–µ–ª—å —Ñ–ª—É–¥–∞
	receiver_id = msg.chat.id
	receiver_fullname = await get_name(msg)

	# –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	msg_list = msg.text.split(maxsplit = 2)

	# –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞
	text_parsing = re_search(r'(?<=text\=).+?(?=;)', msg.text)
	# –ü–∞—Ä—Å–∏–Ω–≥ —Å–∏–º–≤–æ–ª–∞ –ø–µ—á–∞—Ç–∏
	amount_parsing = re_search(r'(?<=amount\=)\d+?(?=;)', msg.text)
		
	# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞
	if text_parsing:
		text = text_parsing[0]
	else:
		await msg.delete()
		await send_log(msg = msg.text, error_info = "–ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç –¥–ª—è 'repeat'")
		return

	# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–ª–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
	if amount_parsing:
		try:
			amount = int(amount_parsing[0])
		except ValueError:
			await msg.delete()
			await send_log(msg = msg.text, error_info = "–ó–Ω–∞—á–µ–Ω–∏–µ 'amount' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º")
			return
	# Value by default
	else:
		amount = 10

	# –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	await msg.delete()

	# –ï—Å–ª–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ —Ç–æ—Ç –∂–µ –∞–π–¥–∏, —Ç–æ –≤—ã–∫–∏–¥—ã–≤–∞–µ–º
	if receiver_id in flooding_targets.keys():
		try:
			await send_log(msg.text, f"–ù–∞ '{receiver_fullname}' —É–∂–µ –∑–∞–ø—É—â–µ–Ω —Ñ–ª—É–¥–µ—Ä!")
			return

		except FloodWait as fw:
			await sleep(fw.value)
			await send_log(msg.text, f"–ù–∞ '{receiver_fullname}' —É–∂–µ –∑–∞–ø—É—â–µ–Ω —Ñ–ª—É–¥–µ—Ä!")
	
	# –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∞–π–¥–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
	flooding_targets[receiver_id] = receiver_fullname

	# –ù–∞—á–∏–Ω–∞–µ–º —Ñ–ª—É–¥
	while amount != 0 and receiver_id in flooding_targets.keys():
		try:
			# –ò–º–∏—Ç–∞—Ü–∏—è –ø–µ—á–∞—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ 1.5 —Å–µ–∫
			await client.send_chat_action(receiver_id, ChatAction.TYPING)
			await sleep(1)
			# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
			await client.send_message(receiver_id, text)
			
		# –û–±—Ä–∞–±–æ—Ç–∫–∞ FloodWait
		except FloodWait as fw:
			await sleep(fw.value)

		# –î–µ–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
		amount -= 1
	
	# –ï—Å–ª–∏ —Ñ–ª—É–¥–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏, —Ç–æ –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–µ —É–¥–∞–ª–µ–Ω–∞ –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å
	if receiver_id in flooding_targets.keys():
		del flooding_targets[receiver_id]


# /deadinside
# /di
@client.on_message(filters.command(commands = ["deadinside", "di"], prefixes = "/") & filters.me)
async def dead_inside(client: Client, msg: Message):
	# –ü–æ–ª—É—á–∞—Ç–µ–ª—å —Ñ–ª—É–¥–∞
	receiver_id = msg.chat.id
	receiver_fullname = await get_name(msg)

	# –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	msg_list = msg.text.split()

	# –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	await msg.delete()
	
	# –ï—Å–ª–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ —Ç–æ—Ç –∂–µ –∞–π–¥–∏, —Ç–æ –≤—ã–∫–∏–¥—ã–≤–∞–µ–º
	if receiver_id in flooding_targets.keys():
		try:
			await send_log(msg.text, f"–ù–∞ '{receiver_fullname}' —É–∂–µ –∑–∞–ø—É—â–µ–Ω —Ñ–ª—É–¥–µ—Ä!")
			return

		except FloodWait as fw:
			await sleep(fw.value)

	# –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∞–π–¥–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
	flooding_targets[receiver_id] = receiver_fullname

	# –ù–∞—á–∏–Ω–∞–µ–º —Ñ–ª—É–¥
	num = 1000

	while num != 6 and receiver_id in flooding_targets.keys():
		try:
			# –ò–º–∏—Ç–∞—Ü–∏—è –ø–µ—á–∞—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ 1.5 —Å–µ–∫
			await client.send_chat_action(receiver_id, ChatAction.TYPING)
			await sleep(2)
			# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
			await client.send_message(receiver_id, f"{num} - 7 = {num - 7}")
			

		except FloodWait as fw:
			await sleep(fw.value)

		# –î–µ–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
		num -= 7

	# –ï—Å–ª–∏ —Ñ–ª—É–¥–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏, —Ç–æ –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–µ —É–¥–∞–ª–µ–Ω–∞ –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å
	if receiver_id in flooding_targets.keys():
		del flooding_targets[receiver_id]


# /stop_flood
@client.on_message(filters.command(commands = "stop_flood", prefixes = "/") & filters.me)
async def stop_flood(client: Client, msg: Message):
	# –ü–æ–ª—É—á–∞—Ç–µ–ª—å —Ñ–ª—É–¥–∞
	receiver_id = msg.chat.id
	receiver_fullname = await get_name(msg)

	# –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	msg_list = msg.text.split()
	
	# –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	await msg.delete()

	if receiver_id not in flooding_targets.keys():
		try:
			await send_log(msg.text, f"–ù–∞ '{receiver_fullname}' –Ω–µ –∑–∞–ø—É—â–µ–Ω —Ñ–ª—É–¥–µ—Ä!")
			return

		except FloodWait as fw:
			await sleep(fw.value)

	del flooding_targets[receiver_id]


# /stop_allflood
@client.on_message(filters.command(commands = "stop_allflood", prefixes = "/") & filters.me)
async def stop_all_flood(client: Client, msg: Message):

	# –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	msg_list = msg.text.split()
	
	# –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	await msg.delete()

	if len(flooding_targets) == 0:
		try:
			await send_log(msg.text, f"–ù–∏ –≤ –æ–¥–Ω–æ–º —á–∞—Ç–µ, –Ω–µ –∑–∞–ø—É—â–µ–Ω —Ñ–ª—É–¥–µ—Ä!")
			return

		except FloodWait as fw:
			await sleep(fw.value)

	flooding_targets.clear()


# /flood_list
@client.on_message(filters.command(commands = "flood_list", prefixes = "/") & filters.me)
async def flood_list(client: Client, msg: Message):

	# –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	await msg.delete()

	result_msg = "‚ôªÔ∏è –í —Å–ª–µ–¥—É—é—â–∏—Ö —á–∞—Ç–∞—Ö –∑–∞–ø—É—â–µ–Ω —Ñ–ª—É–¥–µ—Ä:\n"

	if len(flooding_targets) == 0:
		try:
			await client.send_message("me", f"‚òÅ –ù–∏ –≤ –æ–¥–Ω–æ–º —á–∞—Ç–µ, –Ω–µ –∑–∞–ø—É—â–µ–Ω —Ñ–ª—É–¥–µ—Ä")
			return

		except FloodWait as fw:
			await sleep(fw.value)
	else:

		for name in flooding_targets.values():
			result_msg += f"‚Ä¢ {name}\n"

		try:
			await client.send_message("me", result_msg)
			return

		except FloodWait as fw:
			await sleep(fw.value)


### FAKE-MEDIA

is_running = False
target_global = None
handler = None

async def process_voice(client: Client, msg: Message):
	global is_running
	
	if msg.text == "/cancel":
		is_running = False
		client.remove_handler(*handler)
		await msg.edit("‚Ü©Ô∏è –û—Ç–º–µ–Ω–µ–Ω–æ")
		return

	target = target_global

	# –ò–º–∏—Ç–∞—Ü–∏—è —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
	try:
		await client.read_chat_history(target)
	except PeerIdInvalid:
		await send_log(client, ["", ""], "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∞—Ä–≥–µ—Ç!")
		is_running = False
		client.remove_handler(*handler)
		return

	if msg.voice is None:
		audio = msg.audio
	else:
		audio = msg.voice


	file = await client.download_media(msg, in_memory = True)
	


	# –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏ –≥—Å
	if audio.duration // 5 == 0:
		pass
	else:
		for i in range(audio.duration // 5):
			await client.send_chat_action(target, ChatAction.RECORD_AUDIO)
			await sleep(5)

	if audio.duration - 5 * (audio.duration // 5) != 0:
		await client.send_chat_action(target, ChatAction.RECORD_AUDIO)
		await sleep(audio.duration - 5 * (audio.duration // 5))

	# –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Å
	await client.send_voice(target, file)

	is_running = False
	client.remove_handler(*handler)

	

# /send_voice {target}
@client.on_message(filters.command(commands = "send_voice", prefixes = "/") & filters.me & filters.user("me"))
async def send_voice(client: Client, msg: Message):
	global is_running, target_global, handler

	msg_list = msg.text.split()

	target = msg_list[1]

	if is_running:
		await send_log(client, msg_list, "–ó–∞–ø—É—â–µ–Ω –¥—Ä—É–≥–æ–π –ø—Ä–æ—Ü–µ—Å—Å, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å fake_media!")
		return

	is_running = True

	if target.startswith("@"):
		target = target[1:]
	else:
		try:
			target = int(target)
		except ValueError:
			await send_log(client, msg_list, "–¢–∞—Ä–≥–µ—Ç –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!")
			return

	target_global = target

	handler = client.add_handler(MessageHandler(process_voice, filters.me & (filters.voice | filters.audio | filters.command(commands = "cancel", prefixes = "/")) & filters.user("me") ))
	print("handler –¥–æ–±–∞–≤–ª–µ–Ω")

	await msg.edit("üéµ –û—Ç–ø—Ä–∞–≤—å .ogg –∏–ª–∏ .mp3 —Ñ–∞–π–ª –≤ —ç—Ç–æ—Ç —á–∞—Ç:")





async def process_video_note(client: Client, msg: Message):
	global is_running
	
	if msg.text == "/cancel":
		is_running = False
		client.remove_handler(*handler)
		await msg.edit("‚Ü©Ô∏è –û—Ç–º–µ–Ω–µ–Ω–æ")
		return

	target = target_global

	# –ò–º–∏—Ç–∞—Ü–∏—è —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
	try:
		await client.read_chat_history(target)
	except PeerIdInvalid:
		await send_log(client, ["", ""], "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∞—Ä–≥–µ—Ç!")
		is_running = False
		client.remove_handler(*handler)
		return
	except UsernameNotOccupied:
		await send_log(client, ["", ""], "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∞—Ä–≥–µ—Ç!")
		is_running = False
		client.remove_handler(*handler)
		return
		

	if msg.video_note is None:
		video = msg.video

		if video.width != 384 or video.height != 384:
			await msg.edit("‚ÄºÔ∏è –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 384x384 ‚ÄºÔ∏è")
			is_running = False
			client.remove_handler(*handler)
			return
	else:
		video = msg.video_note


	file = await client.download_media(msg, in_memory = True)
	

	# –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏ –∫—Ä—É–∂–∫–∞
	if video.duration // 5 == 0:
		pass
	else:
		for i in range(video.duration // 5):
			await client.send_chat_action(target, ChatAction.RECORD_VIDEO_NOTE)
			await sleep(5)

	if video.duration - 5 * (video.duration // 5) != 0:
		await client.send_chat_action(target, ChatAction.RECORD_VIDEO_NOTE)
		await sleep(video.duration - 5 * (video.duration // 5))

	# –û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä—É–∂–∫–∞
	await client.send_video_note(target, file)

	is_running = False
	client.remove_handler(*handler)

	

# /send_circle {target}
@client.on_message(filters.command(commands = "send_circle", prefixes = "/") & filters.me & filters.user("me"))
async def send_video_note(client: Client, msg: Message):
	global is_running, target_global, handler

	msg_list = msg.text.split()

	target = msg_list[1]

	if is_running:
		await send_log(client, msg_list, "–ó–∞–ø—É—â–µ–Ω –¥—Ä—É–≥–æ–π –ø—Ä–æ—Ü–µ—Å—Å, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å fake_media!")
		return

	is_running = True

	if target.startswith("@"):
		target = target[1:]
	else:
		try:
			target = int(target)
		except ValueError:
			await send_log(client, msg_list, "–¢–∞—Ä–≥–µ—Ç –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!")
			return

	target_global = target

	handler = client.add_handler(MessageHandler(process_video_note, filters.me & (filters.video_note | filters.video | filters.command(commands = "cancel", prefixes = "/")) & filters.user("me") ))

	await msg.edit("üé¶ –û—Ç–ø—Ä–∞–≤—å .mp4 —Ñ–∞–π–ª —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º (384x384) –≤ —ç—Ç–æ—Ç —á–∞—Ç:")

# –ü–æ–ª—É—á–µ–Ω–∏–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@client.on_message(filters.command(commands = "id", prefixes = "/") & filters.me)
async def get_id(client: Client, msg: Message):
	await client.send_message("me", f"üë®üèª‚Äçüéì {await get_name(msg)}\n ‚àü ID: <code>{msg.chat.id}</code>", parse_mode = ParseMode.HTML)
	await msg.delete()


client.run()